{"ast":null,"code":"import { LOGIN_LOADING, LOGIN_SUCCESS, LOGIN_ERROR } from \"./constants\";\nimport { loginWithPassword } from \"./services\";\nimport { errorParser } from '../../services/apiErrorParser';\n/* Login actions */\n\nexport function loginSetLoading(loading) {\n  return {\n    type: LOGIN_LOADING,\n    payload: loading\n  };\n}\nexport function loginSetToken(token) {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: token\n  };\n}\nexport function loginSetError(error) {\n  return {\n    type: LOGIN_ERROR,\n    payload: error.message\n  };\n}\nexport const checkLogin = formData => dispatch => {\n  return new Promise((resolve, reject) => {\n    dispatch(loginSetLoading(true));\n    loginWithPassword(formData).then(async res => {\n      await dispatch(loginSetToken(res.token));\n      resolve(res);\n    }).catch(err => {\n      const parsedError = errorParser.parseError(err);\n      dispatch(loginSetError(parsedError));\n      reject(err);\n    }).finally(() => {\n      dispatch(loginSetLoading(false));\n    });\n  });\n};","map":{"version":3,"sources":["/Users/danielhamam/Desktop/Computer_Programming/Beats Website/src/store/auth/actions.js"],"names":["LOGIN_LOADING","LOGIN_SUCCESS","LOGIN_ERROR","loginWithPassword","errorParser","loginSetLoading","loading","type","payload","loginSetToken","token","loginSetError","error","message","checkLogin","formData","dispatch","Promise","resolve","reject","then","res","catch","err","parsedError","parseError","finally"],"mappings":"AAAA,SACEA,aADF,EAEEC,aAFF,EAGEC,WAHF,QAIO,aAJP;AAKA,SAASC,iBAAT,QAAkC,YAAlC;AACA,SAASC,WAAT,QAA4B,+BAA5B;AAEA;;AACA,OAAO,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AACvC,SAAO;AACLC,IAAAA,IAAI,EAAEP,aADD;AAELQ,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID;AAED,OAAO,SAASG,aAAT,CAAuBC,KAAvB,EAA8B;AACnC,SAAO;AACLH,IAAAA,IAAI,EAAEN,aADD;AAELO,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID;AAED,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AACnC,SAAO;AACLL,IAAAA,IAAI,EAAEL,WADD;AAELM,IAAAA,OAAO,EAAEI,KAAK,CAACC;AAFV,GAAP;AAID;AAED,OAAO,MAAMC,UAAU,GAAIC,QAAD,IAAeC,QAAD,IAAc;AACrD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvCH,IAAAA,QAAQ,CAACX,eAAe,CAAC,IAAD,CAAhB,CAAR;AACAF,IAAAA,iBAAiB,CAACY,QAAD,CAAjB,CAA4BK,IAA5B,CAAiC,MAAOC,GAAP,IAAe;AAC/C,YAAML,QAAQ,CAACP,aAAa,CAACY,GAAG,CAACX,KAAL,CAAd,CAAd;AACAQ,MAAAA,OAAO,CAACG,GAAD,CAAP;AACA,KAHD,EAGGC,KAHH,CAGUC,GAAD,IAAS;AACjB,YAAMC,WAAW,GAAGpB,WAAW,CAACqB,UAAZ,CAAuBF,GAAvB,CAApB;AACAP,MAAAA,QAAQ,CAACL,aAAa,CAACa,WAAD,CAAd,CAAR;AACAL,MAAAA,MAAM,CAACI,GAAD,CAAN;AACA,KAPD,EAOGG,OAPH,CAOW,MAAM;AAChBV,MAAAA,QAAQ,CAACX,eAAe,CAAC,KAAD,CAAhB,CAAR;AACA,KATD;AAUA,GAZM,CAAP;AAaA,CAdM","sourcesContent":["import {\n  LOGIN_LOADING,\n  LOGIN_SUCCESS,\n  LOGIN_ERROR,\n} from \"./constants\";\nimport { loginWithPassword } from \"./services\";\nimport { errorParser } from '../../services/apiErrorParser';\n\n/* Login actions */\nexport function loginSetLoading(loading) {\n  return {\n    type: LOGIN_LOADING,\n    payload: loading,\n  };\n}\n\nexport function loginSetToken(token) {\n  return {\n    type: LOGIN_SUCCESS,\n    payload: token,\n  };\n}\n\nexport function loginSetError(error) {\n  return {\n    type: LOGIN_ERROR,\n    payload: error.message,\n  };\n}\n\nexport const checkLogin = (formData) => (dispatch) => {\n\treturn new Promise((resolve, reject) => {\n\t\tdispatch(loginSetLoading(true));\n\t\tloginWithPassword(formData).then(async (res) => {\n\t\t\tawait dispatch(loginSetToken(res.token));\n\t\t\tresolve(res)\n\t\t}).catch((err) => {\n\t\t\tconst parsedError = errorParser.parseError(err)\n\t\t\tdispatch(loginSetError(parsedError));\n\t\t\treject(err)\n\t\t}).finally(() => {\n\t\t\tdispatch(loginSetLoading(false));\n\t\t})\n\t})\n};\n"]},"metadata":{},"sourceType":"module"}